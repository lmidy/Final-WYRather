{"ast":null,"code":"var _jsxFileName = \"/Users/lynettemidy/Documents/Final-WYRather/src/components/WouldYouRatherWidget.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card, Image } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport Question from './Question.js';\nimport Summary from './Summary.js';\nimport Result from './Result.js';\nimport { formatDatenoTime } from '../utils/helpers';\nconst bodyTypes = {\n  SUMMARY: 'SUMMARY',\n  QUESTION: 'QUESTION',\n  RESULT: 'RESULT'\n};\n\nconst InnerCard = props => {\n  const bodyType = props.bodyType,\n        question = props.question,\n        votedQuestion = props.votedQuestion;\n\n  switch (bodyType) {\n    case bodyTypes.SUMMARY:\n      return React.createElement(Summary, {\n        question: question,\n        votedQuestion: votedQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n\n    case bodyTypes.QUESTION:\n      return React.createElement(Question, {\n        question: question,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n\n    case bodyTypes.RESULT:\n      return React.createElement(Result, {\n        question: question,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n\n    default:\n      return;\n  }\n};\n\nexport class WouldYouRatherWidget extends Component {\n  render() {\n    const _this$props = this.props,\n          author = _this$props.author,\n          question = _this$props.question,\n          bodyType = _this$props.bodyType,\n          errorPage = _this$props.errorPage,\n          formattedate = _this$props.formattedate,\n          _this$props$votedQues = _this$props.votedQuestion,\n          votedQuestion = _this$props$votedQues === void 0 ? null : _this$props$votedQues;\n\n    if (errorPage === true) {\n      return React.createElement(Redirect, {\n        to: \"/questions/error_Page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Card.Group, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"{qid}\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: author.avatarURL,\n      floated: \"right\",\n      avatar: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, author.name, \" asks: \"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" added \", formattedate)), React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(InnerCard, {\n      bodyType: bodyType,\n      question: question,\n      votedQuestion: votedQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })))));\n  }\n\n}\nWouldYouRatherWidget.propTypes = {\n  question: PropTypes.object,\n  author: PropTypes.object,\n  bodyType: PropTypes.string,\n  qid: PropTypes.string\n};\n\nfunction mapStateToProps({\n  users,\n  questions,\n  authedUser\n}, {\n  match,\n  question_id\n}) {\n  let question,\n      author,\n      bodyType,\n      timestamp,\n      formattedate,\n      errorPage = false; //  const formattedate = formatDate(timestamp);\n\n  if (question_id !== undefined) {\n    question = questions[question_id];\n    timestamp = questions[question_id].timestamp;\n    formattedate = formatDatenoTime(timestamp); //console.log(formattedate);\n\n    author = users[question.author];\n    bodyType = bodyTypes.SUMMARY;\n  } else {\n    const question_id = match.params.question_id;\n    question = questions[question_id];\n    const user = users[authedUser];\n\n    if (question === undefined) {\n      errorPage = true;\n    } else {\n      author = users[question.author];\n      bodyType = bodyTypes.QUESTION;\n\n      if (Object.keys(user.answers).includes(question.id)) {\n        bodyType = bodyTypes.RESULT;\n      }\n    }\n  }\n\n  return {\n    errorPage,\n    question,\n    author,\n    bodyType,\n    formattedate\n  };\n}\n\nexport default connect(mapStateToProps)(WouldYouRatherWidget);","map":{"version":3,"sources":["/Users/lynettemidy/Documents/Final-WYRather/src/components/WouldYouRatherWidget.js"],"names":["React","Component","connect","Redirect","Card","Image","PropTypes","Question","Summary","Result","formatDatenoTime","bodyTypes","SUMMARY","QUESTION","RESULT","InnerCard","props","bodyType","question","votedQuestion","WouldYouRatherWidget","render","author","errorPage","formattedate","avatarURL","name","propTypes","object","string","qid","mapStateToProps","users","questions","authedUser","match","question_id","timestamp","undefined","params","user","Object","keys","answers","includes","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Card, Image } from 'semantic-ui-react';\nimport PropTypes from  'prop-types';\nimport Question from './Question.js';\nimport Summary from './Summary.js';\nimport Result from './Result.js';\nimport { formatDatenoTime } from '../utils/helpers';\n\nconst bodyTypes = {\n  SUMMARY: 'SUMMARY',\n  QUESTION: 'QUESTION',\n  RESULT: 'RESULT'\n};\n\nconst InnerCard = props => {\n  const { bodyType, question, votedQuestion } = props;\n\n  switch (bodyType) {\n    case bodyTypes.SUMMARY:\n      return <Summary question={question} votedQuestion={votedQuestion}/>;\n    case bodyTypes.QUESTION:\n      return <Question question={question} />;\n    case bodyTypes.RESULT:\n      return <Result question={question} />;\n    default:\n      return;\n  }\n};\n\nexport class WouldYouRatherWidget extends Component {\n  static propTypes = {\n    question: PropTypes.object,\n    author: PropTypes.object,\n    bodyType: PropTypes.string,\n    qid: PropTypes.string\n  };\n    render() {\n      const {\n        author,\n        question,\n        bodyType,\n        errorPage,\n        formattedate,\n        votedQuestion = null\n      } = this.props;\n\n      if (errorPage === true) {\n        return <Redirect to=\"/questions/error_Page\" />;\n      }\n\n      return (\n        <Card.Group centered>\n          <Card id='{qid}'>\n           <Card.Content>\n            <Image\n               src={author.avatarURL}\n               floated='right'\n               avatar\n             />\n             <Card.Header>{author.name} asks: </Card.Header>\n             <Card.Meta> added {formattedate}\n             </Card.Meta>\n            </Card.Content>\n            <Card.Content>\n              <Card.Description>\n                 <InnerCard\n                  bodyType={bodyType}\n                  question={question}\n                  votedQuestion={votedQuestion}\n                  />\n               </Card.Description>\n             </Card.Content>\n           </Card>\n         </Card.Group>\n      );\n    }\n  }\n\n\n  function mapStateToProps ({users, questions, authedUser},{ match, question_id })\n  {\n    let question, author, bodyType, timestamp, formattedate, errorPage = false;\n  //  const formattedate = formatDate(timestamp);\n    if (question_id !== undefined) {\n      question = questions[question_id];\n      timestamp = questions[question_id].timestamp;\n      formattedate = formatDatenoTime(timestamp);\n      //console.log(formattedate);\n      author = users[question.author];\n      bodyType = bodyTypes.SUMMARY;\n    } else {\n      const { question_id } = match.params;\n      question = questions[question_id];\n      const user = users[authedUser];\n\n      if (question === undefined) {\n        errorPage = true;\n      } else {\n        author = users[question.author];\n        bodyType = bodyTypes.QUESTION;\n        if (Object.keys(user.answers).includes(question.id)) {\n          bodyType = bodyTypes.RESULT;\n      }\n    }\n  }\n\n  return { errorPage, question, author, bodyType, formattedate\n  };\n}\n\nexport default connect(mapStateToProps)(WouldYouRatherWidget);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/lynettemidy/Documents/Final-WYRather/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport WouldYouRatherWidget from './WouldYouRatherWidget';\nimport { Container, Tab, Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nclass Home extends Component {\n  render() {\n    const allQuestions = this.props.allQuestions;\n    const color = 'blue';\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      widths: 2,\n      menu: {\n        color,\n        inverted: true,\n        attached: false,\n        tabular: false\n      },\n      panes: panes({\n        allQuestions\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n} //TODO: Condition so that when table is empty they are directed to add\n\n\nHome.propTypes = {\n  allQuestions: PropTypes.object.isRequired //  addmorequestions() {\n  //   if (...allQuestions.unaswered.length) ) {\n\n};\n\nconst panes = props => {\n  const allQuestions = props.allQuestions;\n  return [{\n    menuItem: 'Unaswered Questions',\n    render: () => React.createElement(Tab.Pane, {\n      attached: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, allQuestions.unansweredQuestions.map(question => React.createElement(WouldYouRatherWidget, {\n      key: question.id,\n      question_id: question.id,\n      votedQuestion: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(Segment, {\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Add more questions\"))\n  }, {\n    menuItem: 'Answered Questions',\n    render: () => React.createElement(Tab.Pane, {\n      attached: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, allQuestions.answeredQuestions.map(question => React.createElement(WouldYouRatherWidget, {\n      key: question.id,\n      question_id: question.id,\n      votedQuestion: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })))\n  }];\n};\n\nfunction mapStateToProps({\n  questions,\n  users,\n  authedUser\n}) {\n  const answeredIds = Object.keys(users[authedUser].answers);\n  const unansweredQuestions = Object.values(questions).filter(question => !answeredIds.includes(question.id)).sort((a, b) => b.timestamp - a.timestamp);\n  const answeredQuestions = Object.values(questions).filter(question => answeredIds.includes(question.id)).sort((a, b) => b.timestamp - a.timestamp);\n  return {\n    allQuestions: {\n      answeredQuestions,\n      unansweredQuestions\n    }\n  };\n}\n\nexport default connect(mapStateToProps)(Home);","map":{"version":3,"sources":["/Users/lynettemidy/Documents/Final-WYRather/src/components/Home.js"],"names":["React","Component","connect","WouldYouRatherWidget","Container","Tab","Segment","PropTypes","Home","render","allQuestions","props","color","inverted","attached","tabular","panes","propTypes","object","isRequired","menuItem","unansweredQuestions","map","question","id","answeredQuestions","mapStateToProps","questions","users","authedUser","answeredIds","Object","keys","answers","values","filter","includes","sort","a","b","timestamp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,OAAzB,QAAuC,mBAAvC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,IAAN,SAAmBP,SAAnB,CAA6B;AAQ3BQ,EAAAA,MAAM,GAAG;AAAA,UACCC,YADD,GACkB,KAAKC,KADvB,CACCD,YADD;AAEP,UAAME,KAAK,GAAG,MAAd;AAGA,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,CAAb;AAAgB,MAAA,IAAI,EAAE;AAACA,QAAAA,KAAD;AAAQC,QAAAA,QAAQ,EAAE,IAAlB;AAAwBC,QAAAA,QAAQ,EAAE,KAAlC;AAAyCC,QAAAA,OAAO,EAAE;AAAlD,OAAtB;AAAiF,MAAA,KAAK,EAAEC,KAAK,CAAC;AAAEN,QAAAA;AAAF,OAAD,CAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAMD;;AAnB0B,C,CAqB7B;;;AArBMF,I,CACGS,S,GAAY;AACjBP,EAAAA,YAAY,EAAEH,SAAS,CAACW,MAAV,CAAiBC,UADd,CAIpB;AACA;;AALoB,C;;AAsBnB,MAAMH,KAAK,GAAGL,KAAK,IAAI;AAAA,QACfD,YADe,GACEC,KADF,CACfD,YADe;AAGvB,SAAO,CACL;AACEU,IAAAA,QAAQ,EAAE,qBADZ;AAEEX,IAAAA,MAAM,EAAE,MACN,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,YAAY,CAACW,mBAAb,CAAiCC,GAAjC,CAAqCC,QAAQ,IAC5C,oBAAC,oBAAD;AACE,MAAA,GAAG,EAAEA,QAAQ,CAACC,EADhB;AAEE,MAAA,WAAW,EAAED,QAAQ,CAACC,EAFxB;AAGE,MAAA,aAAa,EAAE,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,EAQE,oBAAC,OAAD;AAAS,MAAA,QAAQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BARF;AAHJ,GADK,EAgBL;AACEJ,IAAAA,QAAQ,EAAE,oBADZ;AAEEX,IAAAA,MAAM,EAAE,MACN,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,YAAY,CAACe,iBAAb,CAA+BH,GAA/B,CAAmCC,QAAQ,IAC1C,oBAAC,oBAAD;AACE,MAAA,GAAG,EAAEA,QAAQ,CAACC,EADhB;AAEE,MAAA,WAAW,EAAED,QAAQ,CAACC,EAFxB;AAGE,MAAA,aAAa,EAAE,IAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADL;AAHJ,GAhBK,CAAP;AA+BD,CAlCC;;AAqCF,SAASE,eAAT,CAA0B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAA1B,EAA2D;AACrD,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACC,UAAD,CAAL,CAAkBI,OAA9B,CAApB;AACC,QAAMZ,mBAAmB,GAAGU,MAAM,CAACG,MAAP,CAAcP,SAAd,EACzBQ,MADyB,CAClBZ,QAAQ,IAAI,CAACO,WAAW,CAACM,QAAZ,CAAqBb,QAAQ,CAACC,EAA9B,CADK,EAEzBa,IAFyB,CAEpB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAFN,CAA5B;AAGA,QAAMf,iBAAiB,GAAGM,MAAM,CAACG,MAAP,CAAcP,SAAd,EACvBQ,MADuB,CAChBZ,QAAQ,IAAIO,WAAW,CAACM,QAAZ,CAAqBb,QAAQ,CAACC,EAA9B,CADI,EAEvBa,IAFuB,CAElB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAFR,CAA1B;AAIL,SAAO;AACL9B,IAAAA,YAAY,EAAE;AACZe,MAAAA,iBADY;AAEZJ,MAAAA;AAFY;AADT,GAAP;AAMD;;AAED,eAAenB,OAAO,CAACwB,eAAD,CAAP,CAAyBlB,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport WouldYouRatherWidget from './WouldYouRatherWidget';\nimport { Container, Tab, Segment} from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nclass Home extends Component {\n  static propTypes = {\n    allQuestions: PropTypes.object.isRequired\n  }\n\n //  addmorequestions() {\n //   if (...allQuestions.unaswered.length) ) {\n\n  render() {\n    const { allQuestions } = this.props;\n    const color = 'blue';\n\n\n    return (\n      <Container>\n        <Tab widths={2} menu={{color, inverted: true, attached: false, tabular: false }} panes={panes({ allQuestions })} />\n      </Container>\n    );\n\n  }\n}\n//TODO: Condition so that when table is empty they are directed to add\n\n  const panes = props => {\n  const { allQuestions } = props;\n\n  return [\n    {\n      menuItem: 'Unaswered Questions',\n      render: () => (\n        <Tab.Pane attached={false}>\n          {allQuestions.unansweredQuestions.map(question => (\n            <WouldYouRatherWidget\n              key={question.id}\n              question_id={question.id}\n              votedQuestion={false}\n            />\n          ))}\n          <Segment disabled>Add more questions</Segment>\n        </Tab.Pane>\n      )\n    },\n    {\n      menuItem: 'Answered Questions',\n      render: () => (\n        <Tab.Pane attached={false}>\n            {allQuestions.answeredQuestions.map(question => (\n              <WouldYouRatherWidget\n                key={question.id}\n                question_id={question.id}\n                votedQuestion={true}\n                />\n            ))}\n        </Tab.Pane>\n      )\n    }\n  ];\n};\n\n\nfunction mapStateToProps ({ questions, users, authedUser }){\n      const answeredIds = Object.keys(users[authedUser].answers);\n       const unansweredQuestions = Object.values(questions)\n         .filter(question => !answeredIds.includes(question.id))\n         .sort((a, b) => b.timestamp - a.timestamp);\n       const answeredQuestions = Object.values(questions)\n         .filter(question => answeredIds.includes(question.id))\n         .sort((a, b) => b.timestamp - a.timestamp);\n\n  return {\n    allQuestions: {\n      answeredQuestions,\n      unansweredQuestions\n    }\n  };\n}\n\nexport default connect(mapStateToProps)(Home)\n"]},"metadata":{},"sourceType":"module"}
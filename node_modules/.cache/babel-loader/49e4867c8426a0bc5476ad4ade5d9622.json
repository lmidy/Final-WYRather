{"ast":null,"code":"import { getInitialData } from '../utils/api';\nimport { addUserQuestion, saveUserAnswer, receiveUsers } from '../actions/users';\nimport { addQuestion, receiveQuestions, saveQuestionAnswer } from '../actions/questions';\nimport { _saveQuestionAnswer, _saveQuestion } from '../utils/_DATA';\nexport function handleInitialData() {\n  return dispatch => {\n    return getInitialData().then(({\n      users,\n      questions\n    }) => {\n      dispatch(receiveUsers(users));\n      dispatch(receiveQuestions(questions));\n    });\n  };\n}\nexport function handleAddQuestion(optionOne, optionTwo) {\n  return (dispatch, getState) => {\n    const _getState = getState(),\n          authedUser = _getState.authedUser;\n\n    console.log('what is available in getstate' + authedUser);\n    return _saveQuestion({\n      optionOne,\n      optionTwo,\n      author: authedUser\n    }).then(question => {\n      dispatch(addQuestion(question));\n      console.log('what is the autheduser question in Handle Add WQuestion' + authedUser);\n      dispatch(addUserQuestion(authedUser, question.id));\n    });\n  };\n}\nexport function handleAnswer(qid, option) {\n  return (dispatch, getState) => {\n    const _getState2 = getState(),\n          authedUser = _getState2.authedUser;\n\n    console.log(dispatch);\n    const info = {\n      authedUser: authedUser,\n      qid,\n      answer: option\n    };\n\n    _saveQuestionAnswer(info).then(() => {\n      dispatch(saveQuestionAnswer(authedUser, qid, option));\n      dispatch(saveUserAnswer(authedUser, qid, option));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/lynettemidy/Documents/Final/src/actions/shared.js"],"names":["getInitialData","addUserQuestion","saveUserAnswer","receiveUsers","addQuestion","receiveQuestions","saveQuestionAnswer","_saveQuestionAnswer","_saveQuestion","handleInitialData","dispatch","then","users","questions","handleAddQuestion","optionOne","optionTwo","getState","authedUser","console","log","author","question","id","handleAnswer","qid","option","info","answer"],"mappings":"AAAA,SAASA,cAAT,QAA+B,cAA/B;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,YAA1C,QAA8D,kBAA9D;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,kBAAxC,QAAkE,sBAAlE;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,gBAAnD;AAEA,OAAO,SAASC,iBAAT,GAA8B;AACjC,SAAQC,QAAD,IAAc;AACjB,WAAOV,cAAc,GAChBW,IADE,CACG,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAwB;AAC1BH,MAAAA,QAAQ,CAACP,YAAY,CAACS,KAAD,CAAb,CAAR;AACAF,MAAAA,QAAQ,CAACL,gBAAgB,CAACQ,SAAD,CAAjB,CAAR;AACP,KAJM,CAAP;AAKH,GAND;AAOH;AAED,OAAO,SAASC,iBAAT,CAA4BC,SAA5B,EAAuCC,SAAvC,EAAiD;AACpD,SAAO,CAACN,QAAD,EAAWO,QAAX,KAAwB;AAAA,sBACJA,QAAQ,EADJ;AAAA,UACnBC,UADmB,aACnBA,UADmB;;AAE3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAiCF,UAA7C;AACA,WAAOV,aAAa,CAAC;AACjBO,MAAAA,SADiB;AAEjBC,MAAAA,SAFiB;AAGjBK,MAAAA,MAAM,EAAEH;AAHS,KAAD,CAAb,CAKNP,IALM,CAKAW,QAAD,IAAc;AAChBZ,MAAAA,QAAQ,CAACN,WAAW,CAACkB,QAAD,CAAZ,CAAR;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,4DAA2DF,UAAvE;AACAR,MAAAA,QAAQ,CAACT,eAAe,CAACiB,UAAD,EAAaI,QAAQ,CAACC,EAAtB,CAAhB,CAAR;AACH,KATM,CAAP;AAWH,GAdD;AAeH;AAED,OAAO,SAASC,YAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoC;AACvC,SAAO,CAAChB,QAAD,EAAWO,QAAX,KAAwB;AAAA,uBACNA,QAAQ,EADF;AAAA,UACrBC,UADqB,cACrBA,UADqB;;AAE7BC,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACA,UAAMiB,IAAI,GAAG;AACXT,MAAAA,UAAU,EAAEA,UADD;AAEXO,MAAAA,GAFW;AAGXG,MAAAA,MAAM,EAAEF;AAHG,KAAb;;AAKAnB,IAAAA,mBAAmB,CAAEoB,IAAF,CAAnB,CACKhB,IADL,CACU,MAAM;AACRD,MAAAA,QAAQ,CAACJ,kBAAkB,CAAEY,UAAF,EAAcO,GAAd,EAAmBC,MAAnB,CAAnB,CAAR;AACAhB,MAAAA,QAAQ,CAACR,cAAc,CAAEgB,UAAF,EAAcO,GAAd,EAAmBC,MAAnB,CAAf,CAAR;AACH,KAJL;AAKD,GAbD;AAcH","sourcesContent":["import { getInitialData } from '../utils/api'\nimport { addUserQuestion, saveUserAnswer, receiveUsers } from '../actions/users'\nimport { addQuestion, receiveQuestions, saveQuestionAnswer } from '../actions/questions'\nimport { _saveQuestionAnswer, _saveQuestion } from '../utils/_DATA'\n\nexport function handleInitialData () {\n    return (dispatch) => {\n        return getInitialData()\n            .then(({ users, questions})=> {\n                dispatch(receiveUsers(users));\n                dispatch(receiveQuestions(questions))\n        })\n    }\n}\n\nexport function handleAddQuestion (optionOne, optionTwo){\n    return (dispatch, getState) => {\n        const { authedUser } = getState();\n        console.log('what is available in getstate' +authedUser)\n        return _saveQuestion({\n            optionOne,\n            optionTwo,\n            author: authedUser\n        })\n        .then((question) => {\n            dispatch(addQuestion(question));\n            console.log('what is the autheduser question in Handle Add WQuestion' +authedUser)\n            dispatch(addUserQuestion(authedUser, question.id))\n        })\n\n    }\n}\n\nexport function handleAnswer (qid, option) {\n    return (dispatch, getState) => {\n      const { authedUser } = getState();\n      console.log(dispatch);\n      const info = {\n        authedUser: authedUser,\n        qid,\n        answer: option\n      };\n      _saveQuestionAnswer (info)\n          .then(() => {\n              dispatch(saveQuestionAnswer (authedUser, qid, option));\n              dispatch(saveUserAnswer (authedUser, qid, option))\n          })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
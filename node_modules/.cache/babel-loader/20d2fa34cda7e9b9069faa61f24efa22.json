{"ast":null,"code":"var _jsxFileName = \"/Users/lynettemidy/Documents/Final/src/components/Result.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Header, Segment, Progress, Label, Button } from 'semantic-ui-react';\n\nconst YourVoteLabel = () => React.createElement(Label, {\n  color: \"green\",\n  attached: \"top right\",\n  mini: \"mini\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, \"Your Vote\");\n\nexport class Result extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      this.props.history.push('/');\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          question = _this$props.question,\n          user = _this$props.user;\n    const optionOneVotes = question.optionOne.votes.length;\n    const optionTwoVotes = question.optionTwo.votes.length;\n    const votesTotal = optionOneVotes + optionTwoVotes;\n    const userVote = user.answers[question.id];\n    const selected = userVote === 'optionOne' ? true : false;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Results:\", React.createElement(Header.Subheader, {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Would you rather\")), selected === true ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, selected && React.createElement(YourVoteLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, question.optionOne.text), React.createElement(Progress, {\n      percent: (optionOneVotes / votesTotal * 100).toFixed(2),\n      color: \"blue\",\n      progress: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, optionOneVotes, \" out of \", votesTotal, \" votes\")), React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, !selected && React.createElement(YourVoteLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, question.optionTwo.text), React.createElement(Progress, {\n      percent: (optionTwoVotes / votesTotal * 100).toFixed(2),\n      progress: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, optionTwoVotes, \" out of \", votesTotal, \" votes\"))) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, selected && React.createElement(YourVoteLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, question.optionOne.text), React.createElement(Progress, {\n      percent: (optionOneVotes / votesTotal * 100).toFixed(2),\n      progress: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, optionOneVotes, \" out of \", votesTotal, \" votes\")), React.createElement(Segment, {\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, !selected && React.createElement(YourVoteLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, question.optionTwo.text), React.createElement(Progress, {\n      percent: (optionTwoVotes / votesTotal * 100).toFixed(2),\n      color: \"blue\",\n      progress: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, optionTwoVotes, \" out of \", votesTotal, \" votes\"))), React.createElement(Button, {\n      fluid: true,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Back\"));\n  }\n\n}\nResult.propTypes = {\n  history: PropTypes.object.isRequired,\n  question: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps({\n  users,\n  authedUser\n}) {\n  const user = users[authedUser];\n  return {\n    user\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(Result));","map":{"version":3,"sources":["/Users/lynettemidy/Documents/Final/src/components/Result.js"],"names":["React","Component","Fragment","PropTypes","withRouter","connect","Header","Segment","Progress","Label","Button","YourVoteLabel","Result","handleClick","props","history","push","render","question","user","optionOneVotes","optionOne","votes","length","optionTwoVotes","optionTwo","votesTotal","userVote","answers","id","selected","fontWeight","text","toFixed","propTypes","object","isRequired","mapStateToProps","users","authedUser"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Header, Segment, Progress, Label, Button } from 'semantic-ui-react';\n\n\nconst YourVoteLabel = () => (\n  <Label color='green' attached='top right' mini='mini'>\n        Your Vote\n  </Label>\n\n);\n\nexport class Result extends Component {\n  static propTypes = {\n    history: PropTypes.object.isRequired,\n    question: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired\n  };\n  handleClick = () => {\n    this.props.history.push('/');\n  };\n\n  render() {\n    const { question, user } = this.props;\n    const optionOneVotes = question.optionOne.votes.length;\n    const optionTwoVotes = question.optionTwo.votes.length;\n    const votesTotal = optionOneVotes + optionTwoVotes;\n    const userVote = user.answers[question.id];\n    const selected = userVote === 'optionOne' ? true : false;\n\n\n    return (\n      <Fragment>\n        <Header as=\"h3\">\n          Results:\n          <Header.Subheader style={{ fontWeight: 'bold' }}>\n            Would you rather\n          </Header.Subheader>\n        </Header>\n        {selected === true ? (\n          <Fragment>\n            <Segment color='blue'>\n              {selected && <YourVoteLabel />}\n              <p style={{ fontWeight: 'bold' }}>{question.optionOne.text}</p>\n              <Progress\n                percent={((optionOneVotes / votesTotal) * 100).toFixed(2)}\n                color='blue'\n                progress>\n                {optionOneVotes} out of {votesTotal} votes\n              </Progress>\n            </Segment>\n            <Segment>\n              {!selected && <YourVoteLabel />}\n              <p style={{ fontWeight: 'bold' }}>{question.optionTwo.text}</p>\n              <Progress\n                percent={((optionTwoVotes / votesTotal) * 100).toFixed(2)}\n                progress>\n                {optionTwoVotes} out of {votesTotal} votes\n              </Progress>\n            </Segment>\n          </Fragment>\n        ) : (\n            <Fragment>\n              <Segment>\n                {selected && <YourVoteLabel />}\n                <p style={{ fontWeight: 'bold' }}>{question.optionOne.text}</p>\n                <Progress\n                  percent={((optionOneVotes / votesTotal) * 100).toFixed(2)}\n                  progress>\n                  {optionOneVotes} out of {votesTotal} votes\n                </Progress>\n              </Segment>\n            <Segment color='blue'>\n              {!selected && <YourVoteLabel />}\n              <p style={{ fontWeight: 'bold' }}>{question.optionTwo.text}</p>\n              <Progress\n                percent={((optionTwoVotes / votesTotal) * 100).toFixed(2)}\n                color='blue'\n                progress>\n                {optionTwoVotes} out of {votesTotal} votes\n              </Progress>\n            </Segment>\n          </Fragment>\n        )}\n\n        <Button fluid onClick={this.handleClick}>\n          Back\n        </Button>\n      </Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps({ users, authedUser }) {\n  const user = users[authedUser];\n  return {\n    user\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(Result));\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/lynettemidy/Documents/Final/src/components/Leaderboard.js\";\nimport React from 'react';\nimport { Container, Header, Image, Table } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nfunction Leaderboard(props) {\n  const users = props.users;\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Table, {\n    basic: \"very\",\n    celled: true,\n    striped: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Rank\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"User\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Questions Created\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Questions Answered\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Score\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, users.map((user, index) => React.createElement(Table.Row, {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, index + 1), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h4\",\n    image: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Image, {\n    src: user.avatarURL,\n    alt: \"\".concat(user.name),\n    rounded: true,\n    size: \"mini\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(Header.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, user.name))), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, user.questions.length), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, Object.keys(user.answers).length), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, user.questions.length + Object.keys(user.answers).length))))));\n}\n\nLeaderboard.propTypes = {\n  users: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = ({\n  users\n}) => {\n  const userScore = user => Object.keys(user.answers).length + user.questions.length;\n\n  return {\n    users: Object.values(users).sort((a, b) => userScore(b) - userScore(a))\n  };\n};\n\nexport default connect(mapStateToProps)(Leaderboard);","map":{"version":3,"sources":["/Users/lynettemidy/Documents/Final/src/components/Leaderboard.js"],"names":["React","Container","Header","Image","Table","connect","PropTypes","Leaderboard","props","users","map","user","index","id","avatarURL","name","questions","length","Object","keys","answers","propTypes","array","isRequired","mapStateToProps","userScore","values","sort","a","b"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Header, Image, Table } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nfunction Leaderboard(props) {\n  const { users } = props;\n\n  return (\n    <Container>\n        <Table basic='very' celled striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Rank</Table.HeaderCell>\n              <Table.HeaderCell>User</Table.HeaderCell>\n              <Table.HeaderCell>Questions Created</Table.HeaderCell>\n              <Table.HeaderCell>Questions Answered</Table.HeaderCell>\n              <Table.HeaderCell>Score</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n          {users.map((user, index) => (\n            <Table.Row key={user.id}>\n              <Table.Cell>{index + 1}</Table.Cell>\n              <Table.Cell>\n                <Header as='h4' image>\n                  <Image src={user.avatarURL} alt={`${user.name}`} rounded size='mini' />\n                  <Header.Content>\n                    {user.name}\n                  </Header.Content>\n                </Header>\n              </Table.Cell>\n              <Table.Cell>{user.questions.length}</Table.Cell>\n              <Table.Cell>{Object.keys(user.answers).length}</Table.Cell>\n              <Table.Cell>{user.questions.length + Object.keys(user.answers).length}</Table.Cell>\n            </Table.Row>\n          ))}\n          </Table.Body>\n        </Table>\n    </Container>\n  );\n}\nLeaderboard.propTypes = {\n  users: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = ({ users }) => {\n  const userScore = user =>\n    Object.keys(user.answers).length + user.questions.length;\n  return {\n    users: Object.values(users).sort((a, b) => userScore(b) - userScore(a))\n  }\n};\n\nexport default connect(mapStateToProps)(Leaderboard)\n"]},"metadata":{},"sourceType":"module"}